# This creates the IMPORTED TARGET Bonsai::Bonsai
#
# To use this...
# target_link_libraries(yourliborexe Bonsai::Bonsai)
#
# Optionally use PRIVATE/PUBLIC based on your needs like so...
# target_link_libraries(yourliborexe PRIVATE Bonsai::Bonsai)
#
# Because it's an IMPORTED TARGET, you don't need to include its headers seperately, it's handled for you
#
# If you installed the "Resources" dir, then they can be accessed externally with ${BONSAI_RESOURCES_DIR}

@PACKAGE_INIT@

include(CMakeFindDependencyMacro)
# Since these are required for PUBLIC usage, they must be found here
# Then people don't have to pre-emptively find_package(Threads) or Vulkan
# before find_package(Bonsai)
find_dependency(Threads)
find_dependency(Vulkan)
# Includes the targets which are in the same dir as this file
# So CMAKE_CURRENT_LIST_DIR will be determined when calling find_package(Bonsai)
include(${CMAKE_CURRENT_LIST_DIR}/BonsaiTargets.cmake)

if(TARGET Bonsai::Bonsai)
# If resources were installed, then save their path to be used by other projects in a var
if(@BONSAI_INSTALL_RESOURCES@)
set_and_check(BONSAI_RESOURCES_DIR "@PACKAGE_CMAKE_INSTALL_DATADIR@/Bonsai/Resources")
endif()
# Note "Found Bonsai: " will be automatically prefixed by find_package_handle_standard_args
# Example output when doing find_package(Bonsai)...
# -- Found Bonsai: /usr/lib/libBonsai.so
get_property(_BONSAI_TARGET_LOCATION TARGET Bonsai::Bonsai PROPERTY LOCATION)
endif()
include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(Bonsai
FOUND_VAR BONSAI_FOUND
REQUIRED_VARS _BONSAI_TARGET_LOCATION
)